# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0

AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Stage:
    Type: String
    Description: Stage to deploy resources to
    AllowedValues:
      - staging
      - production

Conditions:
  IsProduction: !Equals [ !Ref Stage, production ]

Globals:
  Api:
    OpenApiVersion: 3.0.1 # to avoid default stage creation
  Function:
    Runtime: nodejs12.x
    MemorySize: 128
    Timeout: 5
    Tracing: Active
    Tags:
      project: my-project
      environment: !Ref Stage

Resources:
  ApiGwAccountConfig:
    Type: "AWS::ApiGateway::Account"
    Properties:
      CloudWatchRoleArn: !GetAtt "ApiGatewayLoggingRole.Arn"
  ApiGatewayLoggingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - !Sub "arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"

  CustomersApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "customers-api-${Stage}"
      StageName: !Ref Stage
      MethodSettings:
        - LoggingLevel: INFO
          ResourcePath: '/*' # allows for logging on any resource
          HttpMethod: '*' # allows for logging on any method
      TracingEnabled: true
      Variables:
        LAMBDA_ALIAS: !Ref Stage
      Auth:
        DefaultAuthorizer: CognitoAuth
        Authorizers:
          CognitoAuth:
            UserPoolArn: !GetAtt CognitoUserPool.Arn  
  
  GetAllCustomers:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-customers-get-all'
      CodeUri: ./src/customers/get-all/dist/
      Handler: index.handler
      AutoPublishAlias: !Ref Stage
      DeploymentPreference:
        Type: !If [IsProduction, CustomLambdaLinear25PercentEvery1Minute, AllAtOnce]        
        Alarms:
          - !Ref GetAllCustomersAliasErrorMetricGreaterThanZeroAlarm
      Environment:
        Variables:
          TABLE: !Ref CustomersTable
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CustomersTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /customers
            Method: get
            RestApiId:
              Ref: CustomersApi
            Auth:            
              Authorizer: 'NONE'     
  
  CreateCustomer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-customers-create'
      CodeUri: ./src/customers/create/dist/
      Handler: index.handler
      AutoPublishAlias: !Ref Stage
      DeploymentPreference:
        Type: !If [IsProduction, CustomLambdaLinear25PercentEvery1Minute, AllAtOnce]
        Hooks:
          PreTraffic: !Ref CreateCustomerPreTraffic
        Alarms:
          - !Ref CreateCustomerAliasErrorMetricGreaterThanZeroAlarm
      Environment:
        Variables:
          TABLE: !Ref CustomersTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref CustomersTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /customers
            Method: post
            RestApiId:
              Ref: CustomersApi
            Auth:
              AuthorizationScopes:
                - email
                - !If
                  - IsProduction
                  - !Ref 'AWS::NoValue'
                  - aws.cognito.signin.user.admin
              Authorizer: CognitoAuth

  DeleteCustomer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-customers-delete'
      CodeUri: ./src/customers/delete/dist/
      Handler: index.handler
      AutoPublishAlias: !Ref Stage
      DeploymentPreference:
        Type: !If [IsProduction, CustomLambdaLinear25PercentEvery1Minute, AllAtOnce]                
      Environment:
        Variables:
          TABLE: !Ref CustomersTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref CustomersTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /customers
            Method: delete
            RestApiId:
              Ref: CustomersApi
            Auth:
              AuthorizationScopes:
                - email
                - !If
                  - IsProduction
                  - !Ref 'AWS::NoValue'
                  - aws.cognito.signin.user.admin
              Authorizer: CognitoAuth   
  UpdateCustomer:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Stage}-customers-update'
      CodeUri: ./src/customers/update/dist/
      Handler: index.handler
      AutoPublishAlias: !Ref Stage
      DeploymentPreference:
        Type: !If [IsProduction, CustomLambdaLinear25PercentEvery1Minute, AllAtOnce]                
      Environment:
        Variables:
          TABLE: !Ref CustomersTable
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref CustomersTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /customers
            Method: put
            RestApiId:
              Ref: CustomersApi
            Auth:
              AuthorizationScopes:
                - email
                - !If
                  - IsProduction
                  - !Ref 'AWS::NoValue'
                  - aws.cognito.signin.user.admin
              Authorizer: CognitoAuth                     

  CustomersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: uid
        Type: String
      TableName: !Sub '${Stage}-customers'
      Tags:
        project: my-project
        environment: !Ref Stage
      SSESpecification:
        SSEEnabled: true

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub "${Stage}-customers-api-user-pool"
      Policies:
        PasswordPolicy:
          MinimumLength: 6
          RequireLowercase: false
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: false
      UsernameAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  UserPoolClient:
    Type: "AWS::Cognito::UserPoolClient"
    Properties:
      UserPoolId: !Ref CognitoUserPool
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
      CallbackURLs:
        - https://aws.amazon.com/
      SupportedIdentityProviders:
        - COGNITO
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH 
        - !If
          - IsProduction
          - !Ref 'AWS::NoValue'
          - ALLOW_USER_PASSWORD_AUTH

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      Domain: !Sub "customer-api-${Stage}-${AWS::AccountId}"
      UserPoolId: !Ref CognitoUserPool

  CreateCustomerPreTraffic:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'CodeDeployHook_${Stage}-customers-create-pre-traffic-check'
      CodeUri: ./src/customers/create-pre-traffic/dist/
      Handler: index.handler
      Environment:
        Variables:
          TABLE: !Ref CustomersTable
          FN_NEW_VERSION: !Ref CreateCustomer.Version
      Tags:
        project: my-project
        environment: !Ref Stage
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref CustomersTable
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - codedeploy:PutLifecycleEventHookExecutionStatus
            Resource:
              !Sub 'arn:aws:codedeploy:${AWS::Region}:${AWS::AccountId}:deploymentgroup:${ServerlessDeploymentApplication}/*'
        - Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !Ref CreateCustomer.Version

  CreateCustomerAliasErrorMetricGreaterThanZeroAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Resource
          Value: !Sub '${GetAllCustomers}:${Stage}'
        - Name: FunctionName
          Value: !Ref GetAllCustomers
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0

  GetAllCustomersAliasErrorMetricGreaterThanZeroAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Lambda Function Error > 0
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: Resource
          Value: !Sub '${CreateCustomer}:${Stage}'
        - Name: FunctionName
          Value: !Ref CreateCustomer
      EvaluationPeriods: 2
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 60
      Statistic: Sum
      Threshold: 0

Outputs:
  ApiEndpoint:
    Description: "API endpoint"
    Value: !Sub "https://${CustomersApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
  UserPoolId:
    Description: "User Pool Id"
    Value: !Ref CognitoUserPool
  UserPoolClientId:
    Description: "User Pool Client Id"
    Value: !Ref UserPoolClient
  CustomersTable:
    Description: "DynamoDB table where we will be storing customers"
    Value: !Ref CustomersTable
